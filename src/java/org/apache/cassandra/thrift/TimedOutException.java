/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.apache.cassandra.thrift;
/*
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 */


import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * RPC timeout was exceeded.  either a node failed mid-operation, or load was too high, or the requested op was too large.
 */
public class TimedOutException extends Exception implements org.apache.thrift.TBase<TimedOutException, TimedOutException._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TimedOutException");

  private static final org.apache.thrift.protocol.TField ACKNOWLEDGED_BY_FIELD_DESC = new org.apache.thrift.protocol.TField("acknowledged_by", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ACKNOWLEDGED_BY_BATCHLOG_FIELD_DESC = new org.apache.thrift.protocol.TField("acknowledged_by_batchlog", org.apache.thrift.protocol.TType.BOOL, (short)2);

  /**
   * if a write operation was acknowledged by some replicas but not by enough to
   * satisfy the required ConsistencyLevel, the number of successful
   * replies will be given here. In case of atomic_batch_mutate method this field
   * will be set to -1 if the batch was written to the batchlog and to 0 if it wasn't.
   */
  public int acknowledged_by; // required
  /**
   * in case of atomic_batch_mutate method this field tells if the batch was written to the batchlog.
   */
  public boolean acknowledged_by_batchlog; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * if a write operation was acknowledged by some replicas but not by enough to
     * satisfy the required ConsistencyLevel, the number of successful
     * replies will be given here. In case of atomic_batch_mutate method this field
     * will be set to -1 if the batch was written to the batchlog and to 0 if it wasn't.
     */
    ACKNOWLEDGED_BY((short)1, "acknowledged_by"),
    /**
     * in case of atomic_batch_mutate method this field tells if the batch was written to the batchlog.
     */
    ACKNOWLEDGED_BY_BATCHLOG((short)2, "acknowledged_by_batchlog");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ACKNOWLEDGED_BY
          return ACKNOWLEDGED_BY;
        case 2: // ACKNOWLEDGED_BY_BATCHLOG
          return ACKNOWLEDGED_BY_BATCHLOG;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ACKNOWLEDGED_BY_ISSET_ID = 0;
  private static final int __ACKNOWLEDGED_BY_BATCHLOG_ISSET_ID = 1;
  private BitSet __isset_bit_vector = new BitSet(2);

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ACKNOWLEDGED_BY, new org.apache.thrift.meta_data.FieldMetaData("acknowledged_by", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACKNOWLEDGED_BY_BATCHLOG, new org.apache.thrift.meta_data.FieldMetaData("acknowledged_by_batchlog", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TimedOutException.class, metaDataMap);
  }

  public TimedOutException() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TimedOutException(TimedOutException other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.acknowledged_by = other.acknowledged_by;
    this.acknowledged_by_batchlog = other.acknowledged_by_batchlog;
  }

  public TimedOutException deepCopy() {
    return new TimedOutException(this);
  }

  @Override
  public void clear() {
    setAcknowledged_byIsSet(false);
    this.acknowledged_by = 0;
    setAcknowledged_by_batchlogIsSet(false);
    this.acknowledged_by_batchlog = false;
  }

  /**
   * if a write operation was acknowledged by some replicas but not by enough to
   * satisfy the required ConsistencyLevel, the number of successful
   * replies will be given here. In case of atomic_batch_mutate method this field
   * will be set to -1 if the batch was written to the batchlog and to 0 if it wasn't.
   */
  public int getAcknowledged_by() {
    return this.acknowledged_by;
  }

  /**
   * if a write operation was acknowledged by some replicas but not by enough to
   * satisfy the required ConsistencyLevel, the number of successful
   * replies will be given here. In case of atomic_batch_mutate method this field
   * will be set to -1 if the batch was written to the batchlog and to 0 if it wasn't.
   */
  public TimedOutException setAcknowledged_by(int acknowledged_by) {
    this.acknowledged_by = acknowledged_by;
    setAcknowledged_byIsSet(true);
    return this;
  }

  public void unsetAcknowledged_by() {
    __isset_bit_vector.clear(__ACKNOWLEDGED_BY_ISSET_ID);
  }

  /** Returns true if field acknowledged_by is set (has been assigned a value) and false otherwise */
  public boolean isSetAcknowledged_by() {
    return __isset_bit_vector.get(__ACKNOWLEDGED_BY_ISSET_ID);
  }

  public void setAcknowledged_byIsSet(boolean value) {
    __isset_bit_vector.set(__ACKNOWLEDGED_BY_ISSET_ID, value);
  }

  /**
   * in case of atomic_batch_mutate method this field tells if the batch was written to the batchlog.
   */
  public boolean isAcknowledged_by_batchlog() {
    return this.acknowledged_by_batchlog;
  }

  /**
   * in case of atomic_batch_mutate method this field tells if the batch was written to the batchlog.
   */
  public TimedOutException setAcknowledged_by_batchlog(boolean acknowledged_by_batchlog) {
    this.acknowledged_by_batchlog = acknowledged_by_batchlog;
    setAcknowledged_by_batchlogIsSet(true);
    return this;
  }

  public void unsetAcknowledged_by_batchlog() {
    __isset_bit_vector.clear(__ACKNOWLEDGED_BY_BATCHLOG_ISSET_ID);
  }

  /** Returns true if field acknowledged_by_batchlog is set (has been assigned a value) and false otherwise */
  public boolean isSetAcknowledged_by_batchlog() {
    return __isset_bit_vector.get(__ACKNOWLEDGED_BY_BATCHLOG_ISSET_ID);
  }

  public void setAcknowledged_by_batchlogIsSet(boolean value) {
    __isset_bit_vector.set(__ACKNOWLEDGED_BY_BATCHLOG_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ACKNOWLEDGED_BY:
      if (value == null) {
        unsetAcknowledged_by();
      } else {
        setAcknowledged_by((Integer)value);
      }
      break;

    case ACKNOWLEDGED_BY_BATCHLOG:
      if (value == null) {
        unsetAcknowledged_by_batchlog();
      } else {
        setAcknowledged_by_batchlog((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ACKNOWLEDGED_BY:
      return Integer.valueOf(getAcknowledged_by());

    case ACKNOWLEDGED_BY_BATCHLOG:
      return Boolean.valueOf(isAcknowledged_by_batchlog());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ACKNOWLEDGED_BY:
      return isSetAcknowledged_by();
    case ACKNOWLEDGED_BY_BATCHLOG:
      return isSetAcknowledged_by_batchlog();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TimedOutException)
      return this.equals((TimedOutException)that);
    return false;
  }

  public boolean equals(TimedOutException that) {
    if (that == null)
      return false;

    boolean this_present_acknowledged_by = true && this.isSetAcknowledged_by();
    boolean that_present_acknowledged_by = true && that.isSetAcknowledged_by();
    if (this_present_acknowledged_by || that_present_acknowledged_by) {
      if (!(this_present_acknowledged_by && that_present_acknowledged_by))
        return false;
      if (this.acknowledged_by != that.acknowledged_by)
        return false;
    }

    boolean this_present_acknowledged_by_batchlog = true && this.isSetAcknowledged_by_batchlog();
    boolean that_present_acknowledged_by_batchlog = true && that.isSetAcknowledged_by_batchlog();
    if (this_present_acknowledged_by_batchlog || that_present_acknowledged_by_batchlog) {
      if (!(this_present_acknowledged_by_batchlog && that_present_acknowledged_by_batchlog))
        return false;
      if (this.acknowledged_by_batchlog != that.acknowledged_by_batchlog)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_acknowledged_by = true && (isSetAcknowledged_by());
    builder.append(present_acknowledged_by);
    if (present_acknowledged_by)
      builder.append(acknowledged_by);

    boolean present_acknowledged_by_batchlog = true && (isSetAcknowledged_by_batchlog());
    builder.append(present_acknowledged_by_batchlog);
    if (present_acknowledged_by_batchlog)
      builder.append(acknowledged_by_batchlog);

    return builder.toHashCode();
  }

  public int compareTo(TimedOutException other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TimedOutException typedOther = (TimedOutException)other;

    lastComparison = Boolean.valueOf(isSetAcknowledged_by()).compareTo(typedOther.isSetAcknowledged_by());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAcknowledged_by()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.acknowledged_by, typedOther.acknowledged_by);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAcknowledged_by_batchlog()).compareTo(typedOther.isSetAcknowledged_by_batchlog());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAcknowledged_by_batchlog()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.acknowledged_by_batchlog, typedOther.acknowledged_by_batchlog);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // ACKNOWLEDGED_BY
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.acknowledged_by = iprot.readI32();
            setAcknowledged_byIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // ACKNOWLEDGED_BY_BATCHLOG
          if (field.type == org.apache.thrift.protocol.TType.BOOL) {
            this.acknowledged_by_batchlog = iprot.readBool();
            setAcknowledged_by_batchlogIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (isSetAcknowledged_by()) {
      oprot.writeFieldBegin(ACKNOWLEDGED_BY_FIELD_DESC);
      oprot.writeI32(this.acknowledged_by);
      oprot.writeFieldEnd();
    }
    if (isSetAcknowledged_by_batchlog()) {
      oprot.writeFieldBegin(ACKNOWLEDGED_BY_BATCHLOG_FIELD_DESC);
      oprot.writeBool(this.acknowledged_by_batchlog);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TimedOutException(");
    boolean first = true;

    if (isSetAcknowledged_by()) {
      sb.append("acknowledged_by:");
      sb.append(this.acknowledged_by);
      first = false;
    }
    if (isSetAcknowledged_by_batchlog()) {
      if (!first) sb.append(", ");
      sb.append("acknowledged_by_batchlog:");
      sb.append(this.acknowledged_by_batchlog);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

